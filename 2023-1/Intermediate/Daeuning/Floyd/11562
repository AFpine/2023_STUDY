#include <iostream>
#include <algorithm>
using namespace std;
#define MAX_COST 0x3f3f3f3f
#define MAX 402

int D[MAX][MAX];
int N, M, U, V;
bool B;

int main(void) {
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> N >> M;

    fill(&D[0][0], &D[MAX - 1][MAX], MAX_COST);

    while (M--) {
        cin >> U >> V >> B;
        D[U][V] = 0;
        D[V][U] = !B;
    }

    for (int i = 1; i <= N; i++) { // 기준이 될 중간노드
        for (int j = 1; j <= N; j++) { // 시작노드
            for (int k = 1; k <= N; k++) { // 도착할 노드
                if (j == k)
                {
                    D[j][k] = 0;
                }
                else if (D[j][i] + D[i][k] < D[j][k])
                {
                    D[j][k] = min(D[j][k], D[j][i] + D[i][k]);
                }
            }
        }
    }

    cin >> M;
    while (M--) {
        cin >> U >> V;
        cout << D[U][V] << '\n';
    }

    return 0;
}
