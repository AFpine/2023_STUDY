#include <iostream>
#include <algorithm>
using namespace std;
#define MAX_COST 0x3f3f3f3f
#define MAX 402

int D[MAX][MAX];
int V, E, a, b, c;

int main(void) {
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> V >> E;

    fill(&D[0][0], &D[MAX - 1][MAX], MAX_COST);

    while (E--) {
        cin >> a >> b >> c;
        D[a][b] = c;
    }

    for (int i = 1; i <= V; i++) { // 기준이 될 중간노드
        for (int j = 1; j <= V; j++) { // 시작노드
            for (int k = 1; k <= V; k++) { // 도착할 노드
                if (j == k)
                {
                    D[j][k] = 0;
                }
                else if (D[j][i] + D[i][k] < D[j][k])
                {
                    D[j][k] = min(D[j][k], D[j][i] + D[i][k]);
                }
            }
        }
    }

    int ans = MAX_COST;

    for (int i = 1; i <= V; i++) {
        for (int j = i + 1; j <= V; j++) {
            ans = min(ans, D[i][j] + D[j][i]);
        }
    }


    if (ans == MAX_COST) ans = -1;
    cout << ans;

    return 0;
}
