#include <iostream>
#include <algorithm>
#include <vector>
#include <tuple>
using namespace std;

vector<int> p(100005, -1);
tuple<int, int, int> edge[1000005];
int V, E, cost, u, v;

int find(int x) {
	if (p[x] < 0) return x;
	return p[x] = find(p[x]);
}

// 같은 그룹인지 아닌지 return.
bool is_diff_group(int u, int v) {
	u = find(u); v = find(v);
	if (u == v) return 0;
	if (p[u] == p[v]) p[u]--;
	if (p[u] < p[v]) p[v] = u;
	else p[u] = v;
	return 1;
}

int main(void)
{
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> V >> E;

	for (int i = 0; i < E; i++) {
		cin >> u >> v >> cost;
		edge[i] = { cost, u, v };
	}

	sort(edge, edge + E);
	int cnt = 0;
	int ans = 0;

	for (int i = 0; i < E; i++) {
		tie(cost, u, v) = edge[i];
		if (!is_diff_group(u, v)) continue;
		ans += cost;
		cnt++;
		if (cnt == V - 2) break;
	}
	cout << ans;

	return 0;
}
